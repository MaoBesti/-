2.8 进程及其状态

·掌握进程进程的基本概念
·掌握进程的三状态模型
·理解进程挂起的概念


进程的提出
    ·操作系统必须全方位地管理计算机系统中运行的程序

    ·因此，操作系统为正在运行程序建立一个管理实体—————— 进程。

进程的概念
    ·进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动

    ·进程是操作系统进行资源分配和调度的一个独立单位

    一个进程包括五个实体部分，分别是：
        ·（OS管理运行程序的）数据结构P；
        ·（运行程序的）内存代码C；
        ·（运行程序的）内存数据D；
        ·（运行程序的）通用寄存器信息R；
        ·（OS控制程序执行的）程序状态字PSW

概念级的进程状态
      ·运行态 ：指进程占有处理器运行
      ·就绪态 : 指进程具备运行体哦阿健等待处理器运行
      ·等待态 ：指进程由于等待资源、输入输出、信号等而不具备运行条件

进程三态模型

       ·运行态  ->   等待态
        等待资源，I/O，信号

        等待态 -> 就绪态
        资源满足，I/O结束，信号完成

        就绪态 -> 运行态
        处理器空闲时选择更高优先权，进程抢占

        运行态 -> 就绪态
        运行时间片到，有更高优先权的进程

进程挂起的概念
    ·OS无法预期进程的数目与资源需求，计算机系统在运行过程中可能出现资源不足的情况
    ·运行资源不足表现为  性能低 和  死锁  两种情况
    ·解决办法：剥夺某些进程的内存及其他资源，调入OS管理的对换区，不参加进程调度，
    待适当时候再调入内存，恢复资源，参与运行
    ·这就是进程挂起
    ·挂起态与等待态有着本质区别，后者占有已申请到的资源处于等待，前者没有任何资源

进程挂起的选择与恢复
    ·一般选择等待态进程进入挂起等待态
    ·也可选择就绪态进程进入挂起就绪态
    ·运行态进程还可以挂起自己
    ·等待时间结束后，挂起等待态进入挂起就绪态
    ·一般选择挂起就绪态进程予以恢复




2.9 进程的数据描述

·掌握进程控制块的概念
·了解进程控制块的内容
·理解进程的内存映像
·理解进程上下文的概念

进程控制块，Process Control Block

·进程控制块PCB是OS用于记录和刻画进程状态及环境信息的数据结构
·借助PCB，OS可以全面管理进程的物理实体，刻画进程的执行现状，控制进程的执行、


       进程标识  ----------------标识信息
       用户可见进程器内存---------现场信息
       控制/状态寄存器内容
       用户/核心栈指针

       进程调度相关信息-----------控制信息
       进程程序/数据地址
       进程队列指引元
       进程通信相关信息
       进程处理器使用信息
       进程特权信息
       进程资源清单



       进程控制块——标识信息
       ·用于存放唯一标识该进程的信息
            ·系统分配的标识号
            ·系统分配的进程组标识号
            ·用户定义的进程名
            ·用户定义的进程组名

       进程控制块——现场信息
       ·用于存放该进程运行时的处理器现场信息

       进程控制块——控制信息
       ·用于存放与管理、调度进程相关的信息


进程映像，Process Image
·某一时刻进程的内容及其执行状态集合
    ·进程控制块：保存进程的标识信息、状态信息和控制信息
    ·进程程序块：进程执行的程序空间
    ·进程数据块：进程处理的数据空间，包括数据、处理函数的用户栈和可修改的程序
    ·核心栈：进程在内核模式下运行时使用的堆栈，中断或系统过程调用


·进程映像是内存级的物理实体，又称为进程的内存映像


进程上下文，Process Context
·进程的执行需要环境支持，包括CPU现场和Cache中执行的信息
·OS中的进程物理实体和支持进程运行的环境合称进程上下文，包括以下：

    ·用户级上下文：
    ·寄存器上下文：
    ·系统级上下文：

2.10 进程的管理

·了解进程管理程序的概念级组成
·掌握进程队列模型和队列管理模块
·理解进程的控制与管理程序的实现

概念级的OS进程管理软件
    ·关键的进程管理软件包括：
    ·系统调用/中断/异常处理程序
    ·队列管理模块
    ·进程控制程序
    ·进程调度程序(独立进程居多)
    ·进程通信程序（多个程序包）
    ·终端登录与作业控制程序、性能监控程序、审计程序等外围程序

进程实现的队列模型



队列管理模块
   ·队列管理模块是操作系统实现进程管理的核心模块
   ·操作系统建立多个进程队列，包括就绪队列和等待队列
   ·按需组织为先进先出队列与优先队列
   ·队列中的进程可以通过PCB中的队列指引元采用单/双指引元或索引连接
   ·出队和入队操作
   ·进程与资源调度围绕进程队列展开

进程的控制与管理
    ·进程创建：进程表中加一项，申请PCB并初始化，生成标识，建立映像，分配资源，移入就绪队列
    ·进程撤销：从队列中移除，归还资源，撤销标识，回收PCB，移除进程表项
    ·进程阻塞：保存现场喜喜，修改PCB，移入等待队列，调度其他进程执行
    ·进程唤醒：等待队列中移出，修改PCB，移入就绪队列（该进程优先级高于运行进程触发抢占）
    ·进程挂起：修改状态并出入相关队列，收回内存等资源送至对换区
    ·进程激活：分配内存，修改状态并出入相关队列
    ·其他：如修改进程特权

进程控制与管理中对于进程的基本操作可以全部或部分实现。

原语与进程控制原语
    ·进程控制过程中涉及对OS核心数据结构（进程表/PCB池/队列/资源表）的修改
    ·为防止与时间有关的错误，应使用原语
    ·原语是由若干条指令构成的完成某种特定功能的程序，执行上具有不可分割性
    ·原语的执行可以通过关中断实现
    ·进程控制使用的原语称为进程控制原语
    ·另一类常用原语是进程通信原语


2.11 进程切换与模式切换

·掌握进程切换与模式切换的概念
·掌握进程切换与模式切换的过程

进程切换
    ·进程切换指从正在运行的进程中收回处理器，让待运行进程来占有处理器运行
    ·进程切换实质上就是被中断运行进程与待运行进程的上下文切换，处理过程是：
         ·保存被中断进程的上下文
         ·转向进程调度
         ·恢复待运行进程的上下文

模式切换
    ·进程切换必须在操作系统内核模式下完成，这就需要模式切换
    ·模式切换又称处理器状态切换，包括：
          ·用户模式到内核模式中断/异常/系统调用：中断用户进程执行而触发
          ·内核模式到用户模式 OS执行中断返回指令：将控制权交换用户进程而触发

模式切换的基本工作任务
     ·中断装置完成正向模式切换，包括：
          ·处理器模式转为内核模式
          ·保存当前进程的PC/PSW值到核心栈
          ·转向中断/异常/系统调用处理程序

    ·中断返回指令完成逆向模式转换，包括：
          ·从待运行进程核心栈中弹出PSW/PC值
          ·处理器模式转为用户模式

2.12 多线程技术概述

·掌握单线程结构进程
·掌握多线程结构进程
·掌握多线程环境下进程与线程的概念
·理解多线程环境下线程的状态与调度
·理解多线程并发程序设计的优势与应用


单线程结构进程
·传统进程是单线程结构进程


     用户地址空间---管理者
     进程控制块

     用户栈---------执行序列
     核心栈

单线程结构进程的问题
·单线程结构进程在并发程序设计上存在的问题
     ·进程切换开销大
     ·进程通信开销大
     ·限制了进程并发的粒度
     ·降低了并行计算的效率


多线程结构进程

    用户地址空间-----管理者
    进程控制块


     线程控制块   线程控制块----执行序列
     用户栈       用户栈
     内核栈       内核栈


多线程环境下进程的概念
·在多线程环境中，进程是操作系统中进行保护和资源分配的独立单位
     ·用来容纳进程映像的虚拟地址空间
     ·对进程、文件和设备的存取保护机制

多线程环境下线程的概念
·线程是进程的一条执行路径，是调度的基本单位，同一个进程中的所有线程共享进程获得的主存空间
和资源，它具有：
    ·线程执行状态
    ·受保护的线程上下文，当线程不运行时，用于存储现场信息
    ·独立的程序指令计数器
    ·执行堆栈
    ·容纳局部变量的静态存储器

多线程环境下线程的状态与调度
·线程状态有运行、就绪和睡眠，无挂起
·与线程状态变化有关的线程操作有：
     孵化、封锁、活化、剥夺、指派、结束

·OS感知线程环境下：
     ·处理器调度对象是线程
     ·进程没有三状态（或者说只有挂起状态）
·OS不感知线程环境下：
     ·处理器调度对象仍是进程
     ·用户空间中的用户调度程序调度线程



并发多线程程序设计的有点
    ·快速线程切换
    ·减少（系统）管理开销
    ·（线程）通信易于实现
    ·并行程度提高
    ·节省内存空间

多线程技术的应用
     ·前台和后台工作
     ·C/S应用模式
     ·加快执行速度
     ·设计用户接口
